#! /usr/bin/env bash

source "$XDG_HOME_BIN"/utils/base
source "$XDG_HOME_BIN"/utils/manager

declare -a PACKAGES_TO_UNINSTALL

build_array_valid() {

    for package in $@
    do
        
        if ! is_not_installed "$package";
        then

            PACKAGES_TO_UNINSTALL+=( "$package" )
            info "O pacote $package será removido."

        else
            
            error "O pacote $package não está instalado."
            
        fi

    done

}

remove() {

    if test ${#PACKAGES_TO_UNINSTALL[@]} -gt 0
    then

        warn "Iniciando a remoção dos pacotes"
        ask_for_sudo "Informe sua senha para iniciar a remoção: "
        sudo nala purge -y "${PACKAGES_TO_UNINSTALL[@]}";

    fi
    

}

valid_uninstall() {

    for uninstalled_package in ${PACKAGES_TO_UNINSTALL[@]}
    do
        
        remove_package "$uninstalled_package"

    done

}

help() {

    usage "Utilitário para desinstalação e sincronização de pacotes. Exemplo de uso: remove <pacote>"
    exit "$1"

}

ARGS=$(getopt -o "h" -l "help" -n "remove" -- "$@") # Adicione aqui o parametro que deseja adicionar ao binário. "<param>:" indica que ele pode ter um valor 

eval set -- "$ARGS"
unset ARGS

while true; 
do
    
    case "$1" in
        -h | --help) 
            shift; # O shift é importante! Ele retira o parâmetro validado para que o prṍximo seja lido. No caso do help, deve ser usado antes, mas nos demais casos vc deve colocar após o processamento
            help 0 
        ;;
        --)
            shift;
            break;
        ;;
    esac

done

build_array_valid $@
remove
valid_uninstall
dsync -m "Pacotes removidos: $(array_to_str ${PACKAGES_TO_UNINSTALL[@]})"