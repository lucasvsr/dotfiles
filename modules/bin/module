#! /usr/bin/env bash

source "$XDG_HOME_BIN"/utils/base

TYPE_MODULE=""
TEMPLATE=""
ARQ=""

help() {

    usage "Crie módulos para o dotfiles usando este comando.

Para um módulo controlado pelo Nix:

*module --nix <pacote>*

Para um módulo controlado pelo *$DOTFILES/init*:

*module --sh <pacote>*"

    exit "$1"

}

ARGS=$(getopt -o "hns" -l "help,nix,sh" -n "module" -- "$@") # Adicione aqui o parametro que deseja adicionar ao binário. "<param>:" indica que ele pode ter um valor 

eval set -- "$ARGS"
unset ARGS

while true; 
do
    
    case "$1" in
        -h | --help) 
            shift; # O shift é importante! Ele retira o parâmetro validado para que o prṍximo seja lido. No caso do help, deve ser usado antes, mas nos demais casos vc deve colocar após o processamento
            help 0 
        ;;
        -n | --nix)
            shift;
            TYPE_MODULE="nix"
        ;;
        -s | --sh)
            shift;
            TYPE_MODULE="sh"
        ;;
        --)
            shift;
            break;
        ;;
    esac

done

if [ -n $@ ]
then
        
    case $TYPE_MODULE in
        "nix") TEMPLATE="$DOTFILES"/templates/nix
            ARQ="default.nix"
        ;;
        "sh") TEMPLATE="$DOTFILES"/templates/sh
            ARQ="sh"
        ;;
        *) help 1
        ;;
    esac

    for module in $@
    do
        
        if [ ! -d "$DOTFILES"/modules/"$module" ]
        then

            mkdir -p "$DOTFILES"/modules/"$module"
        
        else
            
            error "Módulo ${BRed}$module${Color_off} já existe."
            exit 1
            
        fi

        cp "$TEMPLATE" "$DOTFILES"/modules/"$module"/$ARQ &&
        success "Módulo ${BGreen}$2${Color_off} criado com sucesso"

        code "$DOTFILES"

    done

else

    help 1

fi


